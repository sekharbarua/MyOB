#include <iostream>
#include <sstream>
#include <fstream>
#include <functional>

#include "inc\ConsolodiateMarket.h"

void printUsage();

int main(int argc, char* argv[]) {
	orderbook::Order::Quantity target_size;
	std::string feed_file_path;
	//std::ifstream file_stream;
	ifstream file_stream;
	bool load_from_file = false;


	std::function<void()> setTargetSize = [&]() {
		target_size = std::stoul(argv[1]);
		if (target_size < 1) {
			std::cerr << "TARGET-SIZE should be a positive number";
			abort();
		}
	};

	std::function<void()> setFeedFile = [&]() {
		load_from_file = true;
		feed_file_path = argv[2];
		file_stream.open(feed_file_path);
		if (!file_stream.is_open()) {
			std::cerr << "Market feed file cannot be loaded.";
			abort();
		}
	};

	switch (argc) {
	case 2:
		setTargetSize();
		break;
	case 3:
		setTargetSize();
		setFeedFile();
		break;
	default:
		printUsage();
		abort();
	}

	orderbook::BookConsolidator mBookCon;
	mBookCon.setTargetSize(target_size);
	std::string line;

	if (load_from_file) {
		while (getline(file_stream, line)) {
			mBookCon.processOrder(line);
		}
	}
	else {
		while (getline(std::cin, line)) {
			mBookCon.processOrder(line);
		}
	}
	return 0;
}

void printUsage() {
	std::cerr
		<< "usage: mBookCon TARGET-SIZE [FILE] \n"
		"  TARGET-SIZE        total expense you would incur if you bought "
		"TARGET-SIZE shares, and the total income you would receive if you sold "
		"TARGET-SIZE shares\n"

		"  FILE               OPTIONAL a text file containing market data, "
		"if not provided, the program will read market data from standard input."
		"\n\n"

		<< "Market Data format:"
		"\n\n"

		"Add Order: timestamp A order-id side price size \n"
		"timestamp    The time when this message was generated by the market, as milliseconds since midnight.\n"
		"A            A literal string identifying this as an \"Add Order to Book\" message.\n"
		"order-id     A unique string that subsequent \"Reduce Order\" messages will use to modify this order.\n"
		"side         A 'B' if this is a buy order (a bid), and a 'S' if this is a sell order (an ask).\n"
		"price        The limit price of this order.\n"
		"size         The size in shares of this order, when it was initially sent to the market by some stock trader."
		"\n\n"

		<< "Reduce Order: timestamp R order-id size\n"
		"timestamp        The time when this message was generated by the market, as milliseconds since midnight.\n"
		"R            A literal string identifying this as an \"Reduce Order\" message.\n"
		"order-id     The unique string that identifies the order to be reduced.\n"
		"size         The amount by which to reduce the size of the order."
		"This is not the new size of the order. If size is equal to or greater than the existing size of the order, "
		"the order is removed from the book."
		"\n\n"

		<< "Output Format: timestamp action total\n"
		"timestamp    The timestamp from the input message that caused this output message to be generated.\n"
		"action       A string: 'B' if this message contains the new expense to buy target-size shares,"
		" and 'S' if this message contains the new income for selling target-size shares.\n"
		"total        The total expense (if action is 'B') to buy target-size shares,"
		" or the total income (if action is 'S') for selling target-size shares.\n"
		"If the book does not contain target-size shares in the appropriate type of order"
		" (asks for expense; bids for income), the total field contains the string 'NA'.\n";
}
